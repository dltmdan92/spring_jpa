spring.datasource.url=jdbc:postgresql://192.168.99.100:5432/springdata
spring.datasource.username=seungmoo
spring.datasource.password=pass

# create : 애플리케이션이 구동될 때 마다, 새로 스키마가 생성된다. --> 매번 App 실행 시, 이전 데이터들은 DROP 된다.
#           개발 환경에서 적합하다.
# update : 기존 스키마는 그냥 두고, data update 처리되도록 한다. (이전 데이터 보유)
#           장점 : @Entity에서 객체 스키마 변경하게 되면, DB 테이블에도 스키마가 반영된다. (컬럼 추가 등)
#           단점 : 객체 스키마에서 컬럼 제거할 경우, DB 테이블에는 반영되지 않는다 --> 스키마가 지저분해질 수 있다.
# update를 사용하더라도, 중간 중간에 create로 셋팅해서 깔끔하게 관리해주면 된다.

# validate : 스키마가 이미 만들어져 있을 경우, 새로 만들지 않음
#            DB에 있는 릴레이션과 Application에서의 스키마(객체 정보)가 잘 Mapping 됐는지 Validation한다.
#            Validation만 한다. 생성하지 않음 (Validation 오류 시 App 구동 실패)
#            운영 환경에서 적합하다.
#   의존성에 Hibernate가 등록되어 있으며, HibernateJpaAutoConfiguration 자동 설정이 적용되게 된다.
spring.jpa.hibernate.ddl-auto=create
# createClob() not implemented 라는 Warning 안뜨게 할려고
# BUT 현재 쓰는 버전에서는 해당 Warning 발생 안하는 듯
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# hiberate를 쓰면 반드시 발생하는 QUERY는 반드시 봐야한다.! (매우 중요)
# 실행하는 sql들을 console에 출력, SQL에 주입되는 value 값은 안보임(? 로 표기됨) --> logger 설정 별도 필요함
spring.jpa.show-sql=true
# console의 sql들을 읽기 쉽게 format
spring.jpa.properties.hibernate.format_sql=true

# spring.jpa.show-sql=true 는  logging.level.org.hibernate.SQL=debug 이거랑 똑같음
logging.level.org.hibernate.SQL=debug
# SQL PARAMETER의 VALUE 값 확인 용 설정
logging.level.org.hibernate.type.descriptor.sql=trace